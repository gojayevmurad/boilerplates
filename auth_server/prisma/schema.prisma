// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id         String             @id @default(cuid())
  email      String             @unique
  name       String?
  surname    String?
  password   String
  isVerified Boolean            @default(false)
  isBlocked  Boolean            @default(false)
  birthDate  DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  role       Role               @default(USER)
  targets    Target[]
  session    Session?
  token      ConfirmationToken?
}

// this model is used to store the targets that the user has to reach
model Target {
  id        String   @id @default(cuid())
  title     String
  progress  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  steps     Step[]
  user      User     @relation(fields: [userId], references: [id])
}

model Step {
  id          String   @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  targetId    String
  target      Target   @relation(fields: [targetId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
}

model ConfirmationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}
